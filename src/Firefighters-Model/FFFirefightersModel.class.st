"
Main class (Scheduler) of the Firemen Model.
"
Class {
	#name : 'FFFirefightersModel',
	#superclass : 'CMAbstractModel',
	#classInstVars : [
		'forestRatio'
	],
	#category : 'Firefighters-Model',
	#package : 'Firefighters-Model'
}

{ #category : 'accessing' }
FFFirefightersModel class >> aboutThisModel [

	^ 'Simulates wildfire spread and firefighter coordination in a 900-ha monospecific forest. The landscape is a 30Ã—30 grid (1 ha cells), initially half forested. Fire spreads each hour to adjacent forested plots; 12 firefighters patrol, detect, and extinguish fires. Agents can operate independently or in information-sharing groups of various sizes to assess how coordination affects burnt area, containment time, and other performance metrics.'
]

{ #category : 'accessing' }
FFFirefightersModel class >> forestRatio [

	^ forestRatio
]

{ #category : 'accessing' }
FFFirefightersModel class >> forestRatio: anObject [

	forestRatio := anObject
]

{ #category : 'accessing' }
FFFirefightersModel class >> initializeParameters [ 

	super initializeParameters.
	forestRatio := 0.5
]

{ #category : 'accessing' }
FFFirefightersModel class >> modelName [

	^ 'Firefighters'
]

{ #category : 'as yet unclassified' }
FFFirefightersModel class >> screenshotContents [
	"Screenshot of model's spatial grid provided as a string in Base 64 encoding"
	^ ''
]

{ #category : 'init' }
FFFirefightersModel >> basicCreation [

	<init>
	self basicLandscape.
	"self createN: 10 randomlyLocatedEntities: FMFireman."
	self createN: 10 randomlyLocatedEntities: FMFirefighter constrainedBy: #isForest
]

{ #category : 'init' }
FFFirefightersModel >> basicCreationFullForest [

	<init>
	| firePlot |
	self
		createGridNumberOfRows: 30
		numberOfColumns: 30
		neighbourhood: 8
		closed: true.
	
	(self @@ FMPlot) do: #beForest.
	
	firePlot := self selectRandomlyFrom: (self @@ FMPlot).
	firePlot beFire
]

{ #category : 'init' }
FFFirefightersModel >> basicLandscape [

	<init>
	| plots forestPlots firePlot |
	
	self
		createGridNumberOfRows: 30
		numberOfColumns: 30
		neighbourhood: 6
		closed: true.
		
	plots := self @@ FMPlot.
		
	forestPlots := self
		selectRandomlyFrom: plots
		size: (plots size * self class forestRatio) rounded.
		
	"If forestRatio is 0, do not set forest, neither fire"
	forestPlots ifNotEmpty: [  
		forestPlots do: #beForest.
		firePlot := self selectRandomlyFrom: forestPlots.
		firePlot beFire ]
]

{ #category : 'control' }
FFFirefightersModel >> basicStep [

	<control>
	(self @@ FMPlot) do: #newState.
	(self @@ FMPlot) do: #updateState.
	(self @@ FMFirefighter) do: #step
	
]

{ #category : 'probes' }
FFFirefightersModel >> numberOfEmptyPlots [

	<probeNamed: 'Number of empty plots' color: 'EBE0C7'>
	^ ((self @@ FMPlot) select: #isEmpty) size
]

{ #category : 'probes' }
FFFirefightersModel >> numberOfExtinguishedPlots [

	<probeNamed: 'Number of extinguished plots' color: '808080'>
	^ ((self @@ FMPlot) select: #isEmpty) size - 450
]

{ #category : 'probes' }
FFFirefightersModel >> numberOfForestedPlots [

	<probeNamed: 'Number of forested plots' color: '00FF00'>
	^ ((self @@ FMPlot) select: #isForest) size
]

{ #category : 'probes' }
FFFirefightersModel >> numberOfPlotsOnFire [

	<probeNamed: 'Number of plots on fire' color: 'FF0000'>
	^ ((self @@ FMPlot) select: #isFire) size
]
