Class {
	#name : #FFPlot,
	#superclass : #CMSpatialEntityCell,
	#classVars : [
		'Area'
	],
	#category : #'FireFighters-Model'
}

{ #category : #accessing }
FFPlot class >> area [
	"Getter accessor with default value!! This method was automatically generated by Cormas !!"
	^ Area ifNil: [ Area := self area_default ]
]

{ #category : #accessing }
FFPlot class >> area: anObject [
	" Set a value for the receiver's Area
	!! This method was automatically generated by Cormas !!"
	 Area := anObject
]

{ #category : #defaults }
FFPlot class >> area_default [
	" Answer a default value for the Area
	!! This method was automatically generated by Cormas !!"
	^ 1
]

{ #category : #pov }
FFPlot class >> colorDictionary [

	^ { 
		'empty' -> Color white .
		'forest' -> Color green .
		'fire' -> Color red .
		'ash' -> Color gray
	} asDictionary
]

{ #category : #accessing }
FFPlot class >> entityName [

	^ 'Plot'
]

{ #category : #testing }
FFPlot >> hasFireAround [ 
	^ self neighbourhood anySatisfy: [ :p | p state = 'fire']
]

{ #category : #control }
FFPlot >> newState [
	(self state = 'forest' and: [ self hasFireAround ])
		ifTrue: [self bufferState: 'fire']
		ifFalse: [self bufferState: self state].
]

{ #category : #pov }
FFPlot >> povState [

	^ self class colorDictionary at: self state
]

{ #category : #accessing }
FFPlot >> state [
	"Getter accessor with default value!! This method was automatically generated by Cormas !!"
	^ state ifNil: [ state := self state_default ]
]

{ #category : #defaults }
FFPlot >> state_default [
	" Answer a default value for the state
	!! This method was automatically generated by Cormas !!"
	^ 'forest'
]

{ #category : #control }
FFPlot >> step [

]
